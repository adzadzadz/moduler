<?php

namespace api\modules\v1\main\controllers;

use Yii;
use yii\rest\ActiveController;
use yii\filters\VerbFilter;
use yii\filters\AccessControl;
use yii\web\ForbiddenHttpException;
use frontend\models\SignupForm;
use frontend\models\FncSignupForm;
use frontend\models\GlbUser;
use frontend\models\TmpUser;
use common\models\replication\DbDataReplicator;
use common\models\LoginForm;
use common\models\Company;
use common\models\GlbCompany;
use yii\helpers\ArrayHelper;
use yii\helpers\Url;

/**
 * Default controller for the `project` module
 */
class DefaultController extends ActiveController
{
    public $modelClass = 'common\models\FncUser';
    private $_currentRegion;
    private $_auth_key;
    private $_username;

    // public function behaviors()
    // {
    //     return [
    //         'access' => [
    //             'class' => AccessControl::className(),
    //             'denyCallback' => function ($rule, $action) {
    //                 return $this->redirect(['/guest/is-guest']);
    //             },
    //             'rules' => [
    //                 [
    //                     'actions' => ['signup', 'login'],
    //                     'allow' => true,
    //                     'roles' => ['?'],
    //                 ],
    //             ],
    //         ],
    //         'verbs' => [
    //             'class' => VerbFilter::className(),
    //             'actions' => [
    //                 // 'logout' => ['post'],
    //             ],
    //         ],
    //     ];
    // }

    public function actions()
    {
        $actions = parent::actions();

        // disable the "delete" and "create" actions
        unset($actions['update'], $actions['delete'], $actions['view'], $actions['create'], $actions['index']);

        // $actions['auth'] = [
        //     'class' => 'yii\authclient\AuthAction',
        //     'successCallback' => [$this, 'onAuthSuccess'],
        // ];

        return $actions;
    }

    public function actionLanguages()
    {
        return [
            'usage' => '/lang/{{language}} e.g /lang/en-US',
            'languages' => [
                'English' => 'en-US',
                'Dutch'   => 'nl-NL'
            ]
        ];
    }

    public function actionSetLanguage($language)
    {
        $cookie_name = "lang";
        $cookie_value = $language;
        setcookie($cookie_name, $cookie_value, time() + (86400 * 30), "/"); // 86400 = 1 day
        return [
            'success' => true,
            'language' => $language
        ];
    }

    public function actionSignup()
    {
        $model = new SignupForm();

        // Username is the email address 
        if ($updatedPostArray = Yii::$app->request->post()) {
            $updatedPostArray['username'] = $updatedPostArray['email'];
        }

        if ($model->load($updatedPostArray, '')) {
            if ($user = $model->tmpSignup()) {
                if (SignupForm::sendVerificationEmail($user->username, $user->email, $user->firstname . ' ' . $user->lastname, $user->verification_code)) {

                    return [
                        'token' => $user->_access_token
                    ];
                }
                return "it's actually a verification email error";
            }
        }

        return $model->getErrors();
    }

    public function actionLogin($username = null, $password = null)
    {
        if (!Yii::$app->user->isGuest) {
            throw new ForbiddenHttpException('You are not allowed to perform this action.');
        }

        $this->_currentRegion = strtolower(Yii::$app->params['app_region']);

        $model = new LoginForm();

        if (!Yii::$app->request->post()) {
            $data = [
                'LoginForm' => [
                    'username' => $username,
                    'password' => $password
                ]
            ];
        } else {
            $data = Yii::$app->request->post();
        }
        // $testData = [
        //     'LoginForm' => [
        //         'username' => 'adzbite@gmail.com',
        //         'password' => 'Qwerasdf!234'
        //     ]
        // ];
        // var_dump($model->load($testData));
        // $user = \common\models\GlbUser::getUserData($model->username);
        // return var_dump($user[0]['company'][0]->region);
        // return json_encode($model->load(Yii::$app->request->post()));
        // return var_dump(Yii::$app->request->post());

        if ($model->load($data)) {
            if($user = \common\models\GlbUser::getUserData($model->username)) {

                $userRegion = $user[0]['company'][0]->region;
                $userStatus = $user[0]->status;

                // Workaround for unverified users
                if ($userStatus === GlbUser::STATUS_UNVERIFIED) {
                    if ($model->tmpLogin()) {
                        return true;
                    }
                } elseif ($userStatus === GlbUser::STATUS_VERIFIED) {
                    if ($model->tmpLogin()) {
                        return true;
                    }
                }

                // Requires strict refactoring
                if ($model->login()) {
                    // return $userRegion === $this->_currentRegion;
                    // return var_dump(Yii::$app->user->isGuest);
                    if ($userRegion === $this->_currentRegion) {
                        // return $this->goBack();
                        \common\models\FncConfig::selectProject(0);
                        return true;
                    } else {
                        if ($this->_auth_key = $model->getUser()->auth_key) {
                            $this->_username = $model->getUser()->username;
                            Yii::$app->user->logout();
                            // return $this->redirect(Yii::$app->params[$userRegion . '_domain'] . Url::to(['site/login-auth', 'auth_key' => $this->_auth_key, 'username' => $this->_username]));
                            \common\models\FncConfig::selectProject(0);
                            return true;
                        }
                    }

                } else {
                    // Requires review for removal
                    // return '1';
                    return $model->getErrors();
                }
            }
            // This is just so the error shows up as it validates the user
            $model->addError('password', 'Incorrect username or password.');
        } else {
            // Requires review for removal
            return $model->getErrors();
        }
        return $model->getErrors();
    }

    /**
     * @string type : "user" or "company"
     */
    public function actionUpdate($type)
    {
        if (Yii::$app->request->post()) {
            if ($type == 'user') {
                $model = \frontend\models\TmpUser::findOne(Yii::$app->user->id);
            } elseif ($type == 'company') {
                $model = \common\models\TmpCompany::findOne(1);
            } else {
                throw new \yii\web\NotFoundHttpException('Page not found', 404);
            }

            $key = Yii::$app->request->post()['key'];
            $value = Yii::$app->request->post()['value'];

            $model->$key = $value;

            if ($model->save()) {
                return true;
            }
            return false;
        }
        return false;
    }

    // Manually typed verification is accessed through ajax
    public function actionActivate()
    {
        if (isset(Yii::$app->request->post()['code'])) {
            $code = Yii::$app->request->post()['code'];
            $user = new TmpUser();
            $userData = $user->getUser();

            $glbUser = GlbUser::getUserData($userData->username);
            $glbCompany = $glbUser[0]['company'][0];
            
            if ( $userData->status !== TmpUser::STATUS_ACTIVE ) {
                if ($code === $userData->verification_code) {
                
                    $glbUser[0]->status = TmpUser::STATUS_VERIFIED;
                    $userData->status = TmpUser::STATUS_VERIFIED;

                    if ($userData->save() && $glbUser[0]->save()) {
                        return true;
                    }
                }
            } else {
                return 'done';
            }
        }
        return false;
        // throw new \yii\web\NotFoundHttpException('Page not found', 404);
    }

    // ID is actually the username
    public function actionAutoActivator($verifyer = null, $id = null)
    {
        if ($verifyer !== null && $id !== null) {
            $user = new TmpUser();
            $userData = $user->getUser($id);

            $glbUser = GlbUser::getUserData($userData->username);
            $glbCompany = $glbUser[0]['company'][0];
            
            if ( $userData->status !== TmpUser::STATUS_ACTIVE ) {
                if ( Yii::$app->security->validatePassword($userData->verification_code, $verifyer)  ) {
                
                    $glbUser[0]->status = TmpUser::STATUS_VERIFIED;
                    $userData->status = TmpUser::STATUS_VERIFIED;

                    if ($userData->save() && $glbUser[0]->save()) {
                        return $this->redirect(Yii::$app->params[$userData->_region . '_domain'] . Url::to(['registration/finalize', 'id' => $userData->username, 'token' => $userData->_registration_token, 'method' => 'email']));
                    }
                } else {
                    // return 'fail';
                }
            } else {
                // return 'done';
            }
        } else {
            // return 'sad';
        }
        throw new \yii\web\NotFoundHttpException('Page not found', 404);
    }

    /**
     * PLEASE BE INFORMED THAT THE ID (at least in this case) IS ACTUALLY THE USERNAME Y_Y
     * e.g myname@strepz.com
     */
    public function actionFinalize($id = null, $token = null, $method = null)
    {
        // Avoiding execution time error. 
        set_time_limit ( 360 );

        if (Yii::$app->user->isGuest || Yii::$app->user->identity->status < 6) {
            if ($id === null || $token === null) {
                throw new ForbiddenHttpException('You are not allowed to perform this action.');
            }
        } else {
            $id = Yii::$app->user->identity->username;
        }

        $this->_currentRegion = strtolower(Yii::$app->params['app_region']);
        $glbUser = GlbUser::getUserData($id);
        $glbUser =  $glbUser[0]['company'][0];
        Yii::$app->session->set('company_id', $glbUser->company_id);

        if ($this->_currentRegion === $glbUser->region) {
            $tmpUser = new TmpUser;
            
            if (Yii::$app->user->isGuest && $token !== null) {
                $user = $tmpUser->findUserByRegistrationToken($id, $token);
            } else {
                $user = TmpUser::findOne(Yii::$app->user->id);
            }

            if ($user) {
                $signup = new SignupForm;
                if ($setUser = $signup->signup($user->id)) {
                    // return json_encode($setUser);
                    $autoLogin = new LoginForm();
                    $autoLogin->registrationAutoLogin($setUser->username);

                    if ($method == 'email') {
                        return $this->redirect('/');
                    } else {
                        return true;
                    }
                }
            }
        } else {
            // REDIRECTION URL WITH ID AND TOKEN AS PARAMS if region does not match
            $token = Yii::$app->user->identity->_registration_token;
            $this->redirect(Yii::$app->params[$glbUser->region . '_domain'] . Url::to(['registration/finalize', 'id' => $id, 'token' => $token]));
        }
        throw new ForbiddenHttpException('You are not allowed to perform this action.');
    }

    public function actionLogout()
    {
        if (Yii::$app->user->isGuest) {
            throw new \yii\web\NotFoundHttpException('Page not found', 404);
        }
        return Yii::$app->user->logout();
    }
}
